---
import SEO from '../components/SEO.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
  description: string;
  canonical?: string;
  image?: string;
  type?: 'website' | 'article' | 'LocalBusiness';
  bodyClass?: string;
}

const {
  title,
  description,
  canonical,
  image,
  type = 'website',
  bodyClass = ''
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <SEO
      title={title}
      description={description}
      canonical={canonical}
      image={image}
      type={type}
    />
    {import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY && (
      <meta name="google-maps-key" content={import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY} />
    )}
  </head>
  <body class={`font-sans text-neutral-800 bg-background antialiased ${bodyClass}`.trim()}>
    <a href="#main-content" class="skip-to-main">Skip to main content</a>
    <Header />
    
    <main id="main-content" class="min-h-screen">
      <slot />
    </main>
    
    <Footer />

    <!-- Global styles for animations and utilities -->
    <style is:global>
      /* Smooth scrolling for anchor links */
      html {
        scroll-behavior: smooth;
      }

      /* Focus styles for accessibility */
      .focus-ring {
        @apply focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
      }

      /* Button base styles */
      .btn {
        @apply px-4 py-2 sm:px-6 sm:py-3 rounded-full font-semibold transition-all duration-200 focus-ring text-sm sm:text-base;
      }

      .btn-primary {
        @apply bg-primary-500 text-white hover:bg-primary-600 hover:shadow-lg;
      }

      .btn-secondary {
        @apply bg-white text-primary-500 border-2 border-primary-500 hover:bg-primary-500 hover:text-white;
      }

      /* Card styles */
      .card {
        @apply bg-white rounded-lg shadow-lg overflow-hidden transition-shadow duration-200 hover:shadow-xl;
      }

      /* Text utilities */
      .text-balance {
        text-wrap: balance;
      }

      /* Animation utilities */
      .animate-fade-in {
        animation: fadeIn 0.6s ease-out forwards;
      }

      .animate-slide-up {
        animation: slideUp 0.8s ease-out forwards;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes slideUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Intersection observer animations */
      .observe-fade {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
      }

      .observe-fade.in-view {
        opacity: 1;
        transform: translateY(0);
      }

      /* Skip to main content link for screen readers */
      .skip-to-main {
        @apply absolute left-0 top-0 bg-primary-500 text-white px-3 py-2 sm:px-4 rounded-br-lg transform -translate-y-full focus:translate-y-0 transition-transform z-50 text-sm sm:text-base;
      }
      
      /* Responsive text utilities */
      .text-responsive {
        @apply text-sm sm:text-base lg:text-lg;
      }
      
      .text-responsive-lg {
        @apply text-base sm:text-lg lg:text-xl;
      }
      
      /* Improved contrast for accessibility */
      .text-muted {
        @apply text-neutral-600;
      }
      
      /* Better spacing utilities */
      .section-spacing {
        @apply py-12 sm:py-16 lg:py-20;
      }
      
      .container-spacing {
        @apply px-4 sm:px-6 lg:px-8;
      }
    </style>

    <!-- Intersection Observer for scroll animations -->
    <script>
      // Fade in animations on scroll
      if ('IntersectionObserver' in window) {
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('in-view');
              observer.unobserve(entry.target);
            }
          });
        }, observerOptions);

        // Observe elements with .observe-fade class
        document.addEventListener('DOMContentLoaded', () => {
          const elements = document.querySelectorAll('.observe-fade');
          elements.forEach(el => observer.observe(el));
        });
      }

      // Remove animations for users who prefer reduced motion
      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        document.documentElement.style.scrollBehavior = 'auto';
        const style = document.createElement('style');
        style.innerHTML = `
          *, *::before, *::after {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
          }
          .observe-fade {
            opacity: 1 !important;
            transform: none !important;
          }
        `;
        document.head.appendChild(style);
      }
      
      // Add touch-friendly improvements for mobile
      function addTouchSupport() {
        // Add tap highlight removal for better touch experience
        const style = document.createElement('style');
        style.innerHTML = `
          .btn, button, a {
            -webkit-tap-highlight-color: transparent;
          }
        `;
        document.head.appendChild(style);
        
        // Improve scrolling on iOS
        (document.body.style as any).webkitOverflowScrolling = 'touch';
      }
      
      // Initialize touch support on mobile devices
      if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
        addTouchSupport();
      }
    </script>
  </body>
</html>
