---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  sizes?: string;
  srcset?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  fetchpriority = 'auto',
  sizes,
  srcset
} = Astro.props;
---

<img
  src={src}
  alt={alt}
  width={width}
  height={height}
  loading={loading}
  fetchpriority={fetchpriority}
  class={`transition-opacity duration-300 ${className}`}
  sizes={sizes}
  srcset={srcset}
  onload="this.style.opacity='1'"
  style="opacity:0"
/>

<style>
  img {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  
  img[data-loaded] {
    opacity: 1;
  }
</style>

<script>
  // Progressive image loading with error handling
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('img[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            
            // Add error handling
            img.addEventListener('error', () => {
              img.style.opacity = '0.5';
              img.setAttribute('aria-label', `Failed to load image: ${img.alt}`);
            });
            
            img.addEventListener('load', () => {
              img.style.opacity = '1';
              img.setAttribute('data-loaded', 'true');
            });
            
            imageObserver.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });
      
      images.forEach(img => imageObserver.observe(img));
    }
  });
</script>